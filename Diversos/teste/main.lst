CCS PCM C Compiler, Version 4.114, 93460303               08-abr-14 11:15

               Filename: F:\Eletronica\PIC PROJETOS\teste\main.lst

               ROM used: 112 words (1%)
                         Largest free fragment is 2048
               RAM used: 27 (7%) at main() level
                         27 (7%) worst case
               Stack:    1 worst case (0 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   042
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   033
.................... #include <16F876.h> 
.................... //////// Standard Header file for the PIC16F876 device //////////////// 
.................... #device PIC16F876 
.................... #list 
....................  
.................... #FUSES NOWDT, XT, NOPUT, NOBROWNOUT, NOLVP, NOCPD, NOWRT, NODEBUG, NOPROTECT 
.................... #use delay(clock=4000000) 
....................  
....................  
.................... #include "disp.c" 
.................... /* *********************************************************************** 
.................... ** 
.................... **  Copyright (C) 2005  Christian Kranz 
.................... ** 
.................... **  Siemens S65 Display Control 
.................... ** 
.................... *********************************************************************** */ 
....................  
.................... #define LCD_DC              pin_b0 
.................... #define LCD_RESET           pin_b1 
.................... #define LCD_CS              pin_b2 
.................... #define LCD_SCK             pin_b3 
.................... #define LCD_DATA            pin_b4 
....................  
.................... #define DISP_W 132 
.................... #define DISP_H 176 
.................... #define CHAR_H 14 
.................... #define CHAR_W 8 
.................... #define TEXT_COL 16 
.................... #define TEXT_ROW 12 
....................  
.................... extern int16 textcolor;  // color of border around text 
.................... extern int16 backcolor;    // color of background 
....................  
.................... void lcd_wrcmd16(uint16_t); 
.................... void lcd_wrdat16(uint16_t); 
.................... void lcd_wrdata(uint8_t); 
.................... void lcd_wrcmd(uint8_t); 
.................... void lcd_write(char dados);  
.................... void fill_screen(int16 color); 
.................... void put_char(int8 x, int8 y, char c, int8 rot); 
.................... void lcd_init(void);         // LCD initialise 
.................... void lcd_clrscr(void);      // LCD power down 
....................  
.................... // ascii table, starting with character blank (32) 
.................... // size is 8x14 
.................... BYTE const ascii_tab[96][14]={ 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // space (32) 
.................... { 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00}, //! 
.................... { 0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //" 
.................... { 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00}, //# 
.................... { 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18}, //$ 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00}, // % 
.................... { 0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00}, // & 
.................... { 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // ' 
.................... { 0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00}, // ( 
.................... { 0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00}, // ) 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00}, // * 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00}, // + 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00}, // ´ 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // - 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00}, // . 
.................... { 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00}, // / 
.................... { 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xd6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00}, // 0 (48-32) 
.................... { 0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0e, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x6c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x7c, 0x38, 0x7c, 0xc6, 0xc6, 0xc6, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00}, 
.................... { 0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff}, 
.................... { 0x00, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x1c, 0x36, 0x32, 0x30, 0x7c, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78}, 
.................... { 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c}, 
.................... { 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xd6, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00}, 
.................... { 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 
.................... { 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00}, 
.................... }; 
....................  
.................... int16 backcolor=0xFFFF;    // color of background 
.................... int16 textcolor=0x0000; 
....................  
.................... void lcd_write(char dados){ 
....................   char i; 
....................   for (i=8;i>0;i--) { 
....................     output_low(LCD_SCK); 
....................     delay_us(5); 
....................     if ((dados&0x80)==0){ 
....................       output_low(LCD_DATA); 
....................     } 
....................     else { 
....................     output_high(LCD_DATA); 
....................     } 
....................     output_high(LCD_SCK); 
....................     dados=dados<<1; 
....................   } 
.................... } 
....................  
.................... void lcd_wrcmd(unsigned int output_data) 
.................... {        
....................    //CS = 0; 
....................    output_low(LCD_CS); 
....................    //DC = 1; 
....................    output_high(LCD_DC);         
....................    //SPDR= (output_data >> 8); 
....................    lcd_write(output_data >> 8); 
....................     
....................    delay_us(5); 
....................     
....................    //SPDR= (output_data & 0x00FF); 
....................    lcd_write(output_data & 0x00FF); 
....................     
....................     
....................    delay_us(5); 
....................    //CS = 1; 
....................    output_high(LCD_CS);         
.................... } 
....................  
.................... void lcd_wrdata(unsigned int output_data){ 
....................    //CS = 0; 
....................    output_low(LCD_CS);         
....................    //DC = 0; 
....................    output_low(LCD_DC);         
....................    /*SPDR= (output_data >> 8); 
....................    while ((SPSR & (1<<7))==0);*/ 
....................    lcd_write(output_data >> 8);        
....................    delay_us(3); 
....................     
....................    /*SPDR= (output_data & 0x00FF); 
....................    while ((SPSR & (1<<7))==0);*/ 
....................    lcd_write(output_data & 0x00FF);         
....................    delay_us(3); 
....................    //CS = 1; 
....................    output_high(LCD_CS); 
.................... } 
....................  
....................  
.................... void lcd_wrcmd16(int16 dat){ 
....................   lcd_wrcmd((dat>>8)); 
....................   lcd_wrcmd(dat); 
.................... } 
....................  
.................... void lcd_wrdat16(int16 dat){ 
....................   lcd_wrdata(dat>>8); 
....................   lcd_wrdata(dat); 
.................... } 
....................  
.................... void fill_screen(int16 color){ 
....................   int16 i; 
....................   lcd_wrcmd16(0xEF90); 
....................   lcd_wrcmd16(0x0500); 
....................   lcd_wrcmd16(0x0600); 
....................   lcd_wrcmd16(0x0700); 
....................      
....................   for (i=0; i<DISP_W*DISP_H; i++) 
....................     lcd_wrdat16(color); 
.................... } 
....................  
.................... void put_char(int x, int y, char c, int rot){ 
....................   int h,ch,p,mask; 
....................  
....................   lcd_wrcmd16(0xEF90); 
....................  
....................   if (rot){ 
....................     lcd_wrcmd16(0x0500); 
....................     lcd_wrcmd16(0x0800+x); 
....................     lcd_wrcmd16(0x0A00+y); 
....................     lcd_wrcmd16(0x0900+x+CHAR_W-1); 
....................     lcd_wrcmd16(0x0B00+y+CHAR_H-1); 
....................   } 
....................   else{ 
....................     lcd_wrcmd16(0x0504); 
....................     lcd_wrcmd16(0x0800+y); 
....................     lcd_wrcmd16(0x0A00+x); 
....................     lcd_wrcmd16(0x0900+y+CHAR_H-1); 
....................     lcd_wrcmd16(0x0B00+x+CHAR_W-1); 
....................   } 
....................    
....................   for (h=0; h<CHAR_H; h++){ // every column of the character 
....................    if (rot) 
....................       ch=ascii_tab[ c-32 ][h];    
....................    else 
....................       ch=ascii_tab[ c-32 ][CHAR_H-h-1]; 
....................    mask=0x80; 
....................    for (p=0; p<CHAR_W; p++){  // write the pixels 
....................       if (ch&mask){ 
....................          lcd_wrdat16(textcolor);                 
....................       } 
....................       else{ 
....................          lcd_wrdat16(backcolor); 
....................       } 
....................       mask=mask/2; 
....................    }  // for p 
....................    } 
.................... } 
....................  
.................... void lcd_init(void){ 
....................    //RESET = 0; 
....................    output_low(LCD_RESET); 
....................    delay_ms(7); 
....................    //RESET = 1; 
....................    output_high(LCD_RESET); 
....................     
....................    lcd_wrcmd(0xFDFD); 
....................    lcd_wrcmd(0xFDFD); 
....................     
....................    delay_ms(50); 
....................     
....................    lcd_wrcmd(0xEF00); 
....................     
....................    lcd_wrcmd(0xEE04); 
....................    lcd_wrcmd(0x1B04); 
....................     
....................    lcd_wrcmd(0xFEFE); 
....................    lcd_wrcmd(0xFEFE); 
....................     
....................    lcd_wrcmd(0xEF90); 
....................    lcd_wrcmd(0x4A04); 
....................    lcd_wrcmd(0x7F3F); 
....................    lcd_wrcmd(0xEE04); 
....................    lcd_wrcmd(0x4306); 
....................     
....................    delay_ms(20); 
....................     
....................    lcd_wrcmd(0xEF90); 
....................    lcd_wrcmd(0x0983); 
....................    lcd_wrcmd(0x0800); 
....................    lcd_wrcmd(0x0BAF); 
....................    lcd_wrcmd(0x0A00); 
....................    lcd_wrcmd(0x0500); 
....................    lcd_wrcmd(0x0600); 
....................    lcd_wrcmd(0x0700); 
....................     
....................    lcd_wrcmd(0xEF00); 
....................     
....................    lcd_wrcmd(0xEE0C); 
....................     
....................    lcd_wrcmd(0xEF90); 
....................    lcd_wrcmd(0x0080); 
....................     
....................    lcd_wrcmd(0xEFB0); 
....................    lcd_wrcmd(0x4902); 
....................     
....................    lcd_wrcmd(0xEF00); 
....................     
....................    lcd_wrcmd(0x7F01); 
....................    lcd_wrcmd(0xE181); 
....................     
....................    delay_ms(50); 
....................     
....................    lcd_wrcmd(0xE202); 
....................     
....................    delay_ms(100); 
....................     
....................    lcd_wrcmd(0xE276); 
....................     
....................    delay_ms(40);    
....................    
....................    lcd_wrcmd(0xE183); 
....................     
....................    delay_ms(50); 
....................     
....................    lcd_wrcmd(0x8001); 
....................     
....................     
....................    lcd_wrcmd(0xEF90); 
....................    lcd_wrcmd(0x0500); 
....................    lcd_wrcmd(0x0600); 
....................    lcd_wrcmd(0x0700); 
.................... } 
....................  
.................... // end of file 
....................  
....................  
.................... #define      LED_STATUS         pin_a1 
....................  
.................... int tempo; 
....................  
.................... #int_TIMER0 
.................... void  TIMER0_isr(void){ 
....................    tempo++; 
0033:  INCF   2C,F
....................    if(tempo == 46){   //  46 * 21,8ms =~ 1002,8ms ou 1,002 segundos  
0034:  MOVF   2C,W
0035:  SUBLW  2E
0036:  BTFSS  03.2
0037:  GOTO   03E
....................       tempo=0; 
0038:  CLRF   2C
....................       output_toggle(LED_STATUS); 
0039:  BSF    03.5
003A:  BCF    05.1
003B:  MOVLW  02
003C:  BCF    03.5
003D:  XORWF  05,F
....................    } 
.................... } 
003E:  BCF    0B.2
003F:  BCF    0A.3
0040:  BCF    0A.4
0041:  GOTO   01D
.................... void main(){ 
0042:  CLRF   04
0043:  BCF    03.7
0044:  MOVLW  1F
0045:  ANDWF  03,F
0046:  MOVLW  FF
0047:  MOVWF  2B
0048:  MOVWF  2A
0049:  CLRF   29
004A:  CLRF   28
004B:  BSF    03.5
004C:  BSF    1F.0
004D:  BSF    1F.1
004E:  BSF    1F.2
004F:  BCF    1F.3
....................    int i; 
....................    char txt[]={'M','a','r','l','o','n',0}; 
0050:  MOVLW  4D
0051:  BCF    03.5
0052:  MOVWF  2E
0053:  MOVLW  61
0054:  MOVWF  2F
0055:  MOVLW  72
0056:  MOVWF  30
0057:  MOVLW  6C
0058:  MOVWF  31
0059:  MOVLW  6F
005A:  MOVWF  32
005B:  MOVLW  6E
005C:  MOVWF  33
005D:  CLRF   34
....................    setup_adc_ports(NO_ANALOGS); 
005E:  BSF    03.5
005F:  BSF    1F.0
0060:  BSF    1F.1
0061:  BSF    1F.2
0062:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0063:  BCF    03.5
0064:  BCF    1F.0
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_bit);      //21.8 ms overflow 
0065:  BSF    03.5
0066:  MOVF   01,W
0067:  ANDLW  C0
0068:  IORLW  07
0069:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); 
006A:  BCF    03.5
006B:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
006C:  MOVLW  C0
006D:  IORWF  0B,F
....................     
....................    /*lcd_init(); 
....................     
....................    backcolor=0xA000; 
....................    textcolor=0xFFFF; 
....................    fill_screen(backcolor); 
....................     
....................    i=0;    
....................     
....................    while (txt[i]!=0){ 
....................       // two possible text outputs, same lower left (0) upper left (90) corner pixel 
....................       //    put_char(10+i*CHAR_W,60,txt[i],1);  // 90 deg. rotated 
....................       put_char(45+i*CHAR_W,60,txt[i],0);   // 0 deg. rotated 
....................       i++; 
....................    }*/ 
....................    while(true){      
....................    } 
006E:  GOTO   06E
.................... } 
....................  
006F:  SLEEP

Configuration Fuses:
   Word  1: 3D39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
